{"paragraphs":[{"text":"%md\r\n# 🎬 MovieLens 100k Dataset Analysis Report (Zeppelin + Spark SQL)\r\n\r\nThis assignment uses the `u.user`, `u.data`, and `u.item` files in the **MovieLens 100k Dataset** and combines Apache Zeppelin, PySpark, and Spark SQL to analyze user and movie rating data.\r\n\r\nThis assignment aims to answer the following five data analysis questions:\r\n\r\n1. What is the average rating of each movie?\r\n\r\n2. Which movies have the highest average rating?\r\n\r\n3. Which active users (rating ≥ 50) like which types of movies?\r\n\r\n4. Which users are younger than 20 years old?\r\n\r\n5. Which users are between 30 and 40 years old and have the occupation of \"scientist\"?\r\n\r\nAll data is first uploaded to HDFS, then read into DataFrame and temporary views through Spark, and SQL queries are used to solve the problem.","user":"anonymous","dateUpdated":"2025-06-13T07:19:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1749794553917_-2101223421","id":"20250613-060233_906846473","dateCreated":"2025-06-13T06:02:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9893","dateFinished":"2025-06-13T07:19:51+0000","dateStarted":"2025-06-13T07:19:51+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>🎬 MovieLens 100k Dataset Analysis Report (Zeppelin + Spark SQL)</h1>\n<p>This assignment uses the <code>u.user</code>, <code>u.data</code>, and <code>u.item</code> files in the <strong>MovieLens 100k Dataset</strong> and combines Apache Zeppelin, PySpark, and Spark SQL to analyze user and movie rating data.</p>\n<p>This assignment aims to answer the following five data analysis questions:</p>\n<ol>\n<li><p>What is the average rating of each movie?</p>\n</li>\n<li><p>Which movies have the highest average rating?</p>\n</li>\n<li><p>Which active users (rating ≥ 50) like which types of movies?</p>\n</li>\n<li><p>Which users are younger than 20 years old?</p>\n</li>\n<li><p>Which users are between 30 and 40 years old and have the occupation of &ldquo;scientist&rdquo;?</p>\n</li>\n</ol>\n<p>All data is first uploaded to HDFS, then read into DataFrame and temporary views through Spark, and SQL queries are used to solve the problem.</p>\n"}]}},{"text":"%pyspark\r\n\r\nfrom pyspark.sql import SparkSession\r\nfrom pyspark.sql.types import StructType, StructField, IntegerType, StringType\r\nfrom pyspark.sql.functions import avg, count, col, desc\r\n\r\nspark = SparkSession.builder \\\r\n    .appName(\"MovieLens User Analysis\") \\\r\n    .config(\"spark.cassandra.connection.host\", \"127.0.0.1\") \\\r\n    .getOrCreate()","user":"anonymous","dateUpdated":"2025-06-13T06:43:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1749714442341_-1211998981","id":"20250612-074722_947027412","dateCreated":"2025-06-12T07:47:22+0000","dateStarted":"2025-06-13T06:43:07+0000","dateFinished":"2025-06-13T06:43:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9894"},{"text":"%sh\n\nwget http://media.sundog-soft.com/hadoop/ml-100k/u.data -O /tmp/u.data\nwget http://media.sundog-soft.com/hadoop/ml-100k/u.item -O /tmp/u.item\nwget http://media.sundog-soft.com/hadoop/ml-100k/u.user -O /tmp/u.user\necho \"Downloaded!\"","user":"anonymous","dateUpdated":"2025-06-13T06:43:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"--2025-06-13 06:44:01--  http://media.sundog-soft.com/hadoop/ml-100k/u.data\nResolving media.sundog-soft.com (media.sundog-soft.com)... 3.5.24.210, 52.217.105.124, 52.216.61.201, ...\nConnecting to media.sundog-soft.com (media.sundog-soft.com)|3.5.24.210|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 2079229 (2.0M) [application/octet-stream]\nSaving to: ‘/tmp/u.data’\n\n     0K .......... .......... .......... .......... ..........  2%  107K 18s\n    50K .......... .......... .......... .......... ..........  4% 1.00M 10s\n   100K .......... .......... .......... .......... ..........  7%  236K 9s\n   150K .......... .......... .......... .......... ..........  9% 3.50M 7s\n   200K .......... .......... .......... .......... .......... 12%  207K 7s\n   250K .......... .......... .......... .......... .......... 14% 4.99M 6s\n   300K .......... .......... .......... .......... .......... 17%  189K 6s\n   350K .......... .......... .......... .......... .......... 19% 1.05M 5s\n   400K .......... .......... .......... .......... .......... 22%  261K 5s\n   450K .......... .......... .......... .......... .......... 24% 12.0M 5s\n   500K .......... .......... .......... .......... .......... 27%  592M 4s\n   550K .......... .......... .......... .......... .......... 29% 30.7M 4s\n   600K .......... .......... .......... .......... .......... 32% 1.18M 3s\n   650K .......... .......... .......... .......... .......... 34%  240K 3s\n   700K .......... .......... .......... .......... .......... 36% 2.33M 3s\n   750K .......... .......... .......... .......... .......... 39%  182K 3s\n   800K .......... .......... .......... .......... .......... 41% 2.76M 3s\n   850K .......... .......... .......... .......... .......... 44%  496M 3s\n   900K .......... .......... .......... .......... .......... 46% 8.29M 2s\n   950K .......... .......... .......... .......... .......... 49% 24.0M 2s\n  1000K .......... .......... .......... .......... .......... 51%  263K 2s\n  1050K .......... .......... .......... .......... .......... 54% 5.07M 2s\n  1100K .......... .......... .......... .......... .......... 56% 37.9M 2s\n  1150K .......... .......... .......... .......... .......... 59% 1.63M 2s\n  1200K .......... .......... .......... .......... .......... 61%  235K 2s\n  1250K .......... .......... .......... .......... .......... 64% 8.38M 1s\n  1300K .......... .......... .......... .......... .......... 66% 9.05M 1s\n  1350K .......... .......... .......... .......... .......... 68% 1.65M 1s\n  1400K .......... .......... .......... .......... .......... 71%  229K 1s\n  1450K .......... .......... .......... .......... .......... 73% 1.97M 1s\n  1500K .......... .......... .......... .......... .......... 76% 93.5M 1s\n  1550K .......... .......... .......... .......... .......... 78% 3.95M 1s\n  1600K .......... .......... .......... .......... .......... 81%  229K 1s\n  1650K .......... .......... .......... .......... .......... 83% 10.9M 1s\n  1700K .......... .......... .......... .......... .......... 86% 12.6M 0s\n  1750K .......... .......... .......... .......... .......... 88% 1.80M 0s\n  1800K .......... .......... .......... .......... .......... 91%  221K 0s\n  1850K .......... .......... .......... .......... .......... 93% 17.7M 0s\n  1900K .......... .......... .......... .......... .......... 96% 8.79M 0s\n  1950K .......... .......... .......... .......... .......... 98% 1.84M 0s\n  2000K .......... .......... ..........                      100% 31.3M=3.3s\n\n2025-06-13 06:44:05 (610 KB/s) - ‘/tmp/u.data’ saved [2079229/2079229]\n\n--2025-06-13 06:44:05--  http://media.sundog-soft.com/hadoop/ml-100k/u.item\nResolving media.sundog-soft.com (media.sundog-soft.com)... 52.216.62.169, 52.217.48.220, 3.5.8.187, ...\nConnecting to media.sundog-soft.com (media.sundog-soft.com)|52.216.62.169|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 236344 (231K) [application/octet-stream]\nSaving to: ‘/tmp/u.item’\n\n     0K .......... .......... .......... .......... .......... 21%  101K 2s\n    50K .......... .......... .......... .......... .......... 43%  978K 1s\n   100K .......... .......... .......... .......... .......... 64%  225K 0s\n   150K .......... .......... .......... .......... .......... 86%  275M 0s\n   200K .......... .......... ..........                      100%  138K=1.0s\n\n2025-06-13 06:44:07 (232 KB/s) - ‘/tmp/u.item’ saved [236344/236344]\n\n--2025-06-13 06:44:07--  http://media.sundog-soft.com/hadoop/ml-100k/u.user\nResolving media.sundog-soft.com (media.sundog-soft.com)... 54.231.130.49, 52.216.62.169, 52.216.139.195, ...\nConnecting to media.sundog-soft.com (media.sundog-soft.com)|54.231.130.49|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 22628 (22K) [text/plain]\nSaving to: ‘/tmp/u.user’\n\n     0K .......... .......... ..                              100% 88.3K=0.3s\n\n2025-06-13 06:44:08 (88.3 KB/s) - ‘/tmp/u.user’ saved [22628/22628]\n\nDownloaded!\n"}]},"apps":[],"jobName":"paragraph_1749694291180_-781083878","id":"20250612-021131_881461975","dateCreated":"2025-06-12T02:11:31+0000","dateStarted":"2025-06-13T06:44:00+0000","dateFinished":"2025-06-13T06:44:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9895"},{"text":"%sh\n\nhadoop fs -rm -r -f /tmp/ml-100k\n\nhadoop fs -mkdir /tmp/ml-100k\n\nhadoop fs -put /tmp/u.data /tmp/ml-100k/\nhadoop fs -put /tmp/u.item /tmp/ml-100k/\nhadoop fs -put /tmp/u.user /tmp/ml-100k/","user":"anonymous","dateUpdated":"2025-06-13T06:04:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1749714745010_743293809","id":"20250612-075225_660825609","dateCreated":"2025-06-12T07:52:25+0000","dateStarted":"2025-06-13T04:14:21+0000","dateFinished":"2025-06-13T04:14:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9896"},{"text":"%pyspark\r\n\r\nfrom pyspark.sql.types import StructType, StructField, IntegerType, StringType\r\nfrom pyspark.sql.functions import avg, count, col, desc\r\n\r\n# Load u.user\r\nuser_rdd = spark.sparkContext.textFile(\"hdfs:///tmp/ml-100k/u.user\")\r\n\r\nuser_schema = StructType([\r\n    StructField(\"user_id\", IntegerType(), True),\r\n    StructField(\"age\", IntegerType(), True),\r\n    StructField(\"gender\", StringType(), True),\r\n    StructField(\"occupation\", StringType(), True),\r\n    StructField(\"zip_code\", StringType(), True)\r\n])\r\n\r\nuser_df = user_rdd.map(lambda x: x.split(\"|\")) \\\r\n    .map(lambda f: (int(f[0]), int(f[1]), f[2], f[3], f[4])) \\\r\n    .toDF(user_schema)\r\n\r\nuser_df.show(5)\r\n","user":"anonymous","dateUpdated":"2025-06-13T06:46:45+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+--------+\n|user_id|age|gender|occupation|zip_code|\n+-------+---+------+----------+--------+\n|      1| 24|     M|technician|   85711|\n|      2| 53|     F|     other|   94043|\n|      3| 23|     M|    writer|   32067|\n|      4| 24|     M|technician|   43537|\n|      5| 33|     F|     other|   15213|\n+-------+---+------+----------+--------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749714930086_2124266525","id":"20250612-075530_1741964628","dateCreated":"2025-06-12T07:55:30+0000","dateStarted":"2025-06-13T06:46:47+0000","dateFinished":"2025-06-13T06:46:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9897"},{"text":"%pyspark\r\n\r\n# Load u.data (user_id, movie_id, rating, timestamp)\r\nrating_rdd = spark.sparkContext.textFile(\"hdfs:///tmp/ml-100k/u.data\")\r\n\r\nrating_df = rating_rdd.map(lambda x: x.split(\"\\t\")) \\\r\n    .map(lambda f: (int(f[0]), int(f[1]), int(f[2]), int(f[3]))) \\\r\n    .toDF([\"user_id\", \"movie_id\", \"rating\", \"timestamp\"])\r\n\r\nrating_df.show(5)","user":"anonymous","dateUpdated":"2025-06-13T06:50:38+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+--------+------+---------+\n|user_id|movie_id|rating|timestamp|\n+-------+--------+------+---------+\n|      0|      50|     5|881250949|\n|      0|     172|     5|881250949|\n|      0|     133|     1|881250949|\n|    196|     242|     3|881250949|\n|    186|     302|     3|891717742|\n+-------+--------+------+---------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749715222033_39310591","id":"20250612-080022_1934042877","dateCreated":"2025-06-12T08:00:22+0000","dateStarted":"2025-06-13T06:50:38+0000","dateFinished":"2025-06-13T06:50:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9898"},{"text":"%pyspark\r\n\r\n# Load u.item (movie_id | title | release_date | ... | genre_flags[19])\r\nitem_rdd = spark.sparkContext.textFile(\"hdfs:///tmp/ml-100k/u.item\")\r\n\r\n# 19 genres from position 5 onwards\r\ngenre_columns = [\r\n    \"unknown\", \"action\", \"adventure\", \"animation\", \"children\", \"comedy\", \"crime\",\r\n    \"documentary\", \"drama\", \"fantasy\", \"film_noir\", \"horror\", \"musical\",\r\n    \"mystery\", \"romance\", \"sci_fi\", \"thriller\", \"war\", \"western\"\r\n]\r\n\r\nitem_schema = StructType(\r\n    [StructField(\"movie_id\", IntegerType(), True),\r\n     StructField(\"title\", StringType(), True)] +\r\n    [StructField(g, IntegerType(), True) for g in genre_columns]\r\n)\r\n\r\nitem_df = item_rdd.map(lambda x: x.split(\"|\")) \\\r\n    .map(lambda f: (int(f[0]), f[1]) + tuple([int(x) for x in f[5:24]])) \\\r\n    .toDF(item_schema)\r\n\r\nitem_df.select(\"movie_id\", \"title\").show(5)","user":"anonymous","dateUpdated":"2025-06-13T06:51:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-----------------+\n|movie_id|            title|\n+--------+-----------------+\n|       1| Toy Story (1995)|\n|       2| GoldenEye (1995)|\n|       3|Four Rooms (1995)|\n|       4|Get Shorty (1995)|\n|       5|   Copycat (1995)|\n+--------+-----------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749715227981_654539406","id":"20250612-080027_1942566542","dateCreated":"2025-06-12T08:00:27+0000","dateStarted":"2025-06-13T06:51:01+0000","dateFinished":"2025-06-13T06:51:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9899"},{"text":"%md\nRegister the DataFrame as a temporary view for querying using Spark SQL","user":"anonymous","dateUpdated":"2025-06-13T07:35:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1749800147399_1558013563","id":"20250613-073547_1194877488","dateCreated":"2025-06-13T07:35:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12530","dateFinished":"2025-06-13T07:35:55+0000","dateStarted":"2025-06-13T07:35:55+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Register the DataFrame as a temporary view for querying using Spark SQL</p>\n"}]}},{"text":"%pyspark\r\n\r\nuser_df.createOrReplaceTempView(\"users\")\r\nrating_df.createOrReplaceTempView(\"ratings\")\r\nitem_df.createOrReplaceTempView(\"movies\")","user":"anonymous","dateUpdated":"2025-06-13T06:51:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1749795695592_1194588208","id":"20250613-062135_1892045557","dateCreated":"2025-06-13T06:21:35+0000","dateStarted":"2025-06-13T06:51:07+0000","dateFinished":"2025-06-13T06:51:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9900"},{"text":"%md\r\n### Question i: Average rating for each movie\r\n\r\nWe use the `ratings` table to calculate the average rating for each `movie_id` and display the first ten rows of data.","user":"anonymous","dateUpdated":"2025-06-13T07:23:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Question i: Average rating for each movie</h3>\n<p>We use the <code>ratings</code> table to calculate the average rating for each <code>movie_id</code> and display the first ten rows of data.</p>\n"}]},"apps":[],"jobName":"paragraph_1749796055342_-842399996","id":"20250613-062735_701320258","dateCreated":"2025-06-13T06:27:35+0000","dateStarted":"2025-06-13T07:23:52+0000","dateFinished":"2025-06-13T07:23:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9901"},{"text":"%sql\r\nSELECT \r\n  movie_id,\r\n  AVG(rating) AS avg_rating\r\nFROM ratings\r\nGROUP BY movie_id","user":"anonymous","dateUpdated":"2025-06-13T07:34:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"movie_id\tavg_rating\n964\t3.3333333333333335\n474\t4.252577319587629\n26\t3.452054794520548\n29\t2.6666666666666665\n1677\t3.0\n191\t4.163043478260869\n541\t2.877551020408163\n65\t3.5391304347826087\n418\t3.5813953488372094\n1010\t3.25\n"}]},"apps":[],"jobName":"paragraph_1749796442374_-72348881","id":"20250613-063402_2032993997","dateCreated":"2025-06-13T06:34:02+0000","dateStarted":"2025-06-13T06:51:18+0000","dateFinished":"2025-06-13T06:51:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9903"},{"text":"%md\n### Question ii: Top 10 movies with the highest average ratings\n\nWe connect the rating records with the movie information and exclude movies with less than 15 ratings to ensure a more reliable ranking.\nFrom the results, we can see that the movie Close Shave, A (1995) has the highest rating of 4.49.","user":"anonymous","dateUpdated":"2025-06-13T07:56:24+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Question ii: Top 10 movies with the highest average ratings</h3>\n<p>We connect the rating records with the movie information and exclude movies with less than 15 ratings to ensure a more reliable ranking.\n<br  />From the results, we can see that the movie Close Shave, A (1995) has the highest rating of 4.49.</p>\n"}]},"apps":[],"jobName":"paragraph_1749796238563_-173997567","id":"20250613-063038_1732211781","dateCreated":"2025-06-13T06:30:38+0000","dateStarted":"2025-06-13T07:56:24+0000","dateFinished":"2025-06-13T07:56:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9904"},{"text":"%sql\r\nSELECT \r\n  m.title,\r\n  AVG(r.rating) AS avg_rating,\r\n  COUNT(*) AS rating_count\r\nFROM ratings r\r\nJOIN movies m ON r.movie_id = m.movie_id\r\nGROUP BY m.title\r\nHAVING rating_count >= 15\r\nORDER BY avg_rating DESC\r\nLIMIT 10","user":"anonymous","dateUpdated":"2025-06-13T07:55:25+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":true},"editorMode":"ace/mode/sql","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"title\tavg_rating\trating_count\nClose Shave, A (1995)\t4.491071428571429\t112\nSchindler's List (1993)\t4.466442953020135\t298\nWrong Trousers, The (1993)\t4.466101694915254\t118\nCasablanca (1942)\t4.45679012345679\t243\nWallace & Gromit: The Best of Aardman Animation (1996)\t4.447761194029851\t67\nShawshank Redemption, The (1994)\t4.445229681978798\t283\nRear Window (1954)\t4.3875598086124405\t209\nUsual Suspects, The (1995)\t4.385767790262173\t267\nStar Wars (1977)\t4.359589041095891\t584\n12 Angry Men (1957)\t4.344\t125\n"}]},"apps":[],"jobName":"paragraph_1749796532363_-1291830286","id":"20250613-063532_405500588","dateCreated":"2025-06-13T06:35:32+0000","dateStarted":"2025-06-13T07:34:43+0000","dateFinished":"2025-06-13T07:34:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9905"},{"text":"%md\n### Question iii: Users who have rated at least 50 times, and count the movie genres they rated most often\n\nFilter out users who have rated more than 50 times, and calculate the total ratings of each user on each movie type. From this, you can know which type of movie each user has rated more, and set special personalized recommendations for these users.","user":"anonymous","dateUpdated":"2025-06-13T07:54:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1749797997615_1713771758","id":"20250613-065957_1051052787","dateCreated":"2025-06-13T06:59:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11551","dateFinished":"2025-06-13T07:54:07+0000","dateStarted":"2025-06-13T07:54:07+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Question iii: Users who have rated at least 50 times, and count the movie genres they rated most often</h3>\n<p>Filter out users who have rated more than 50 times, and calculate the total ratings of each user on each movie type. From this, you can know which type of movie each user has rated more, and set special personalized recommendations for these users.</p>\n"}]}},{"text":"%pyspark\r\n\r\nfrom pyspark.sql.functions import sum as spark_sum, col, greatest, lit, when\r\nfrom functools import reduce\r\n\r\n# Number of user reviews\r\nactive_users = rating_df.groupBy(\"user_id\") \\\r\n    .agg(count(\"movie_id\").alias(\"num_ratings\")) \\\r\n    .filter(\"num_ratings >= 50\")\r\n\r\n# Get rating + movie genre\r\njoined = rating_df.join(item_df, \"movie_id\").join(active_users, \"user_id\")\r\n\r\n# Count the total score of each user for each type\r\ngenre_scores = []\r\nfor genre in genre_columns:\r\n    genre_scores.append(spark_sum(col(\"rating\") * col(genre)).alias(genre))\r\n\r\nuser_genre_pref = joined.groupBy(\"user_id\").agg(*genre_scores)\r\n\r\n# Add a max score column\r\nuser_genre_pref = user_genre_pref.withColumn(\r\n    \"max_score\",\r\n    greatest(*[col(g) for g in genre_columns])\r\n)\r\n\r\n# Constructing the favorite_genre expression\r\nfav_genre_expr = reduce(\r\n    lambda acc, g: when(col(g) == col(\"max_score\"), lit(g)).otherwise(acc),\r\n    genre_columns,\r\n    lit(\"unknown\")\r\n)\r\n\r\n# Add favorite type column\r\nresult = user_genre_pref.withColumn(\"favorite_genre\", fav_genre_expr) \\\r\n    .select(\"user_id\", \"favorite_genre\", \"max_score\")\r\n\r\nresult.show(10, truncate=False)","user":"anonymous","dateUpdated":"2025-06-13T07:04:30+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+--------------+---------+\n|user_id|favorite_genre|max_score|\n+-------+--------------+---------+\n|26     |drama         |135      |\n|474    |drama         |698      |\n|65     |drama         |191      |\n|541    |comedy        |178      |\n|222    |drama         |433      |\n|270    |drama         |243      |\n|293    |drama         |527      |\n|938    |comedy        |118      |\n|243    |drama         |214      |\n|367    |horror        |125      |\n+-------+--------------+---------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1749787143108_842883459","id":"20250613-035903_1611755277","dateCreated":"2025-06-13T03:59:03+0000","dateStarted":"2025-06-13T06:59:38+0000","dateFinished":"2025-06-13T07:00:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9907"},{"text":"%md\n### Question iv: Users younger than 20\n\nFrom the results of the operation, we can see that most users under 20 years old are students.\nFrom this data result, we can guess what kind of movies teenagers prefer? What time period are they active? Do they prefer a certain rating habit?\nThis information can be used to set up personalized recommendations, advertising and interface optimization on their interface.","user":"anonymous","dateUpdated":"2025-06-13T07:49:08+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1749798159061_-629720113","id":"20250613-070239_554638136","dateCreated":"2025-06-13T07:02:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11860","dateFinished":"2025-06-13T07:49:08+0000","dateStarted":"2025-06-13T07:49:08+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Question iv: Users younger than 20</h3>\n<p>From the results of the operation, we can see that most users under 20 years old are students.\n<br  />From this data result, we can guess what kind of movies teenagers prefer? What time period are they active? Do they prefer a certain rating habit?\n<br  />This information can be used to set up personalized recommendations, advertising and interface optimization on their interface.</p>\n"}]}},{"text":"%sql\r\n\r\nSELECT * \r\nFROM users\r\nWHERE age < 20","user":"anonymous","dateUpdated":"2025-06-13T07:33:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"user_id\tage\tgender\toccupation\tzip_code\n30\t7\tM\tstudent\t55436\n36\t19\tF\tstudent\t93117\n52\t18\tF\tstudent\t55105\n57\t16\tM\tnone\t84010\n67\t17\tM\tstudent\t60402\n68\t19\tM\tstudent\t22904\n101\t15\tM\tstudent\t05146\n110\t19\tM\tstudent\t77840\n142\t13\tM\tother\t48118\n179\t15\tM\tentertainment\t20755\n206\t14\tF\tstudent\t53115\n221\t19\tM\tstudent\t20685\n223\t19\tF\tstudent\t47906\n246\t19\tM\tstudent\t28734\n257\t17\tM\tstudent\t77005\n258\t19\tF\tstudent\t77801\n262\t19\tF\tstudent\t78264\n270\t18\tF\tstudent\t63119\n281\t15\tF\tstudent\t06059\n289\t11\tM\tnone\t94619\n291\t19\tM\tstudent\t44106\n303\t19\tM\tstudent\t14853\n320\t19\tM\tstudent\t24060\n341\t17\tF\tstudent\t44405\n347\t18\tM\tstudent\t90210\n367\t17\tM\tstudent\t37411\n368\t18\tM\tstudent\t92113\n375\t17\tM\tentertainment\t37777\n393\t19\tM\tstudent\t83686\n397\t17\tM\tstudent\t27514\n425\t19\tM\tstudent\t58644\n434\t16\tF\tstudent\t49705\n451\t16\tM\tstudent\t48446\n453\t18\tM\tstudent\t06333\n461\t15\tM\tstudent\t98102\n462\t19\tF\tstudent\t02918\n471\t10\tM\tstudent\t77459\n482\t18\tF\tstudent\t40256\n507\t18\tF\twriter\t28450\n521\t19\tM\tstudent\t02146\n528\t18\tM\tstudent\t55104\n541\t19\tF\tstudent\t84302\n550\t16\tF\tstudent\t95453\n580\t16\tM\tstudent\t17961\n582\t17\tM\tstudent\t93003\n588\t18\tF\tstudent\t93063\n592\t18\tM\tstudent\t97520\n601\t19\tF\tartist\t99687\n609\t13\tF\tstudent\t55106\n618\t15\tF\tstudent\t44212\n619\t17\tM\tstudent\t44134\n620\t18\tF\twriter\t81648\n621\t17\tM\tstudent\t60402\n624\t19\tM\tstudent\t30067\n628\t13\tM\tnone\t94306\n631\t18\tF\tstudent\t38866\n632\t18\tM\tstudent\t55454\n642\t18\tF\tstudent\t95521\n646\t17\tF\tstudent\t51250\n674\t13\tF\tstudent\t55337\n700\t17\tM\tstudent\t76309\n710\t19\tM\tstudent\t92020\n729\t19\tM\tstudent\t56567\n747\t19\tM\tother\t93612\n761\t17\tM\tstudent\t97302\n787\t18\tF\tstudent\t98620\n813\t14\tF\tstudent\t02136\n817\t19\tM\tstudent\t60152\n849\t15\tF\tstudent\t25652\n851\t18\tM\tother\t29646\n859\t18\tF\tother\t06492\n863\t17\tM\tstudent\t60089\n872\t19\tF\tstudent\t74078\n880\t13\tM\tstudent\t83702\n887\t14\tF\tstudent\t27249\n904\t17\tF\tstudent\t61073\n925\t18\tF\tsalesman\t49036\n"}]},"apps":[],"jobName":"paragraph_1749788451790_-1157369186","id":"20250613-042051_2134661297","dateCreated":"2025-06-13T04:20:51+0000","dateStarted":"2025-06-13T07:33:18+0000","dateFinished":"2025-06-13T07:33:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9908"},{"text":"%md\n### Question v: Users whose occupation is \"scientist\" and whose age is between 30 and 40 years old\n\nWe have found all users whose occupation is scientist and whose age is between 30 and 40.\nThis type of query is very useful in user profiling, precision marketing, and personalized recommendations. If we want to recommend professional movies or documentaries for middle-aged scientists, we can further analyze the preferences of this group. The same can be done for other occupations.","user":"anonymous","dateUpdated":"2025-06-13T07:49:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1749798133651_-1996995110","id":"20250613-070213_928793359","dateCreated":"2025-06-13T07:02:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11797","dateFinished":"2025-06-13T07:49:21+0000","dateStarted":"2025-06-13T07:49:21+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Question v: Users whose occupation is &ldquo;scientist&rdquo; and whose age is between 30 and 40 years old</h3>\n<p>We have found all users whose occupation is scientist and whose age is between 30 and 40.\n<br  />This type of query is very useful in user profiling, precision marketing, and personalized recommendations. If we want to recommend professional movies or documentaries for middle-aged scientists, we can further analyze the preferences of this group. The same can be done for other occupations.</p>\n"}]}},{"text":"%sql\r\nSELECT * \r\nFROM users\r\nWHERE occupation = 'scientist' \r\n  AND age BETWEEN 30 AND 40","user":"anonymous","dateUpdated":"2025-06-13T07:32:35+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"user_id\tage\tgender\toccupation\tzip_code\n40\t38\tM\tscientist\t27514\n71\t39\tM\tscientist\t98034\n74\t39\tM\tscientist\tT8H1N\n107\t39\tM\tscientist\t60466\n183\t33\tM\tscientist\t27708\n272\t33\tM\tscientist\t53706\n309\t40\tM\tscientist\t70802\n337\t37\tM\tscientist\t10522\n430\t38\tM\tscientist\t98199\n538\t31\tM\tscientist\t21010\n543\t33\tM\tscientist\t95123\n554\t32\tM\tscientist\t62901\n643\t39\tM\tscientist\t55122\n730\t31\tF\tscientist\t32114\n874\t36\tM\tscientist\t37076\n918\t40\tM\tscientist\t70116\n"}]},"apps":[],"jobName":"paragraph_1749789000743_976645784","id":"20250613-043000_1166526906","dateCreated":"2025-06-13T04:30:00+0000","dateStarted":"2025-06-13T07:32:35+0000","dateFinished":"2025-06-13T07:32:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9909"},{"text":"%md\n## summary\n\nIn this data analysis task, using the MovieLens 100k dataset, an analysis environment based on PySpark and Spark SQL was built through Apache Zeppelin to complete the exploration and analysis of user, movie and rating data.\nI first used PySpark to upload the three files u.user, u.data and u.item to HDFS and read them into RDD format.\n\nThen, these RDDs were converted into structured DataFrames and registered as SQL temporary views (Temp View) to facilitate subsequent SQL operations.\n\nThen, in Zeppelin, %pyspark and %sql were combined to write query statements to solve the five problems in the job one by one.\n\nIn the processing process, SQL table connections (JOIN) and some aggregate functions (such as AVG, COUNT, GROUP BY, etc.) were mainly used to implement analysis logic, such as calculating the average score, finding high-scoring movies, analyzing user preferences, etc.\n\nI first calculated the average rating of each movie, which laid the foundation for finding high-scoring movies later. Then I filtered and selected only movies with more than 15 ratings to avoid being interfered by \"score-brushing\" of unpopular movies, and the results were more realistic. Next, we analyzed those active users who rated more than 50 times, and inferred their favorite genres, such as dramas, comedies, etc., based on the types of movies they rated the most. In addition, we also found young user groups under the age of 20, and users between the ages of 30 and 40 who are scientists. These data can help us make more accurate user portraits and personalized recommendations.","user":"anonymous","dateUpdated":"2025-06-13T08:03:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1749789039918_-581171864","id":"20250613-043039_1760414859","dateCreated":"2025-06-13T04:30:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9910","dateFinished":"2025-06-13T08:03:49+0000","dateStarted":"2025-06-13T08:03:48+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>summary</h2>\n<p>In this data analysis task, using the MovieLens 100k dataset, an analysis environment based on PySpark and Spark SQL was built through Apache Zeppelin to complete the exploration and analysis of user, movie and rating data.\n<br  />I first used PySpark to upload the three files u.user, u.data and u.item to HDFS and read them into RDD format.</p>\n<p>Then, these RDDs were converted into structured DataFrames and registered as SQL temporary views (Temp View) to facilitate subsequent SQL operations.</p>\n<p>Then, in Zeppelin, %pyspark and %sql were combined to write query statements to solve the five problems in the job one by one.</p>\n<p>In the processing process, SQL table connections (JOIN) and some aggregate functions (such as AVG, COUNT, GROUP BY, etc.) were mainly used to implement analysis logic, such as calculating the average score, finding high-scoring movies, analyzing user preferences, etc.</p>\n<p>I first calculated the average rating of each movie, which laid the foundation for finding high-scoring movies later. Then I filtered and selected only movies with more than 15 ratings to avoid being interfered by &ldquo;score-brushing&rdquo; of unpopular movies, and the results were more realistic. Next, we analyzed those active users who rated more than 50 times, and inferred their favorite genres, such as dramas, comedies, etc., based on the types of movies they rated the most. In addition, we also found young user groups under the age of 20, and users between the ages of 30 and 40 who are scientists. These data can help us make more accurate user portraits and personalized recommendations.</p>\n"}]}},{"text":"","user":"anonymous","dateUpdated":"2025-06-13T08:04:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1749801825160_2038337245","id":"20250613-080345_874921586","dateCreated":"2025-06-13T08:03:45+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12753"}],"name":"Assignment3","id":"2KWG3MQQN","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}